dnl This is the the source file used to produce the configure script
AC_INIT(defs.h)
version="0.6.7.4 Development"
AC_SUBST(version)
echo "Configuring STonX version $version..."
echo "#define VERSION \"$version\"">version.h
echo "#define STONX_VERSION_MAJOR 0">>version.h
echo "#define STONX_VERSION_MINOR 6">>version.h
echo "#define STONX_PATCH_MAJOR 7">>version.h
echo "#define STONX_PATCH_MINOR 3">>version.h
#### PROGRAMS
AC_PROG_CC
AC_ISC_POSIX
static=
if test "n$GCC" != nyes; then
cat <<'EOF'
Note: using gcc may improve the speed of emulation significantly!
EOF
else
copt="-Wall -Wno-unused -O3"
changequote(,)dnl
v=`$CC -v 2>&1|grep version|sed 's,.*version \([1-9][0-9.]*\)$,\1,'`
if test "`echo $v|sed -e 's/\.//g' -e 's/[^0-9]*//' -e 's/ .*//'`" -lt 245; then
	echo "You have only version $v, please install a newer version of gcc!"
	exit 1
else
	echo "Using gcc version $v"
fi
changequote([,])dnl
fi
AC_MSG_CHECKING(whether shifts are modulo 32)
AC_TRY_RUN([
unsigned int r=1;
main(){return (r<<33)==2;}
],[
shwrap32=0
echo "no (good!)"]
,[
shwrap32=1
echo "yes (yuck)"]
,[
echo "cross compiling an emulator? strange person"
])
AC_CHECK_PROGS(MAKEDEPEND,gccmakedep makedepend, no)
if test "n$MAKEDEPEND" = nno; then
cat <<'EOF'
You don't seem to have `makedepend', but I'll continue the configuration
process. It will fail at the end when I'll try to do a `make depend', you're
on your own then... (Yes, I know I could use gcc -MM etc. but I was too lazy)

You don't really need this if you're going to compile only once, or without
altering the code.
EOF
fi
#### LIBRARIES
AC_PATH_XTRA
if test "x$no_x" = yes; then
	echo "Sorry, I can't find any trace of the X Window installation (X11) on your"
	echo "system! Please use --x-includes=DIR and --x-libraries=DIR if you have them."
	exit 1
fi
test -n "$x_includes" && inc="$inc -I$x_includes"
test -n "$x_libraries" && xlibs="$xlibs -L$x_libraries"
AC_SUBST(inc)
AC_SUBST(xlibs)
AC_SUBST(X_CFLAGS)
AC_SUBST(X_LIBS)
AC_SUBST(X_EXTRA_LIBS)
AC_SUBST(X_PRE_LIBS)
AC_MSG_CHECKING(for MIT-SHM extension)
TMPLIBS=$LIBS
LIBS="$LIBS $X_PRE_LIBS $xlibs -lXext -lX11 $X_EXTRA_LIBS -lc"
AC_TRY_LINK([
#include <X11/Xlib.h>
#include <X11/extensions/XShm.h>],
[
int a,b; Bool c; Display *d;
XShmQueryVersion (d, &a, &b, &c);
],
def="$def -DSH_MEM"
shm=ok,
LIBS=$TMPLIBS
shm=no)
AC_MSG_RESULT($shm)
#### Functions
AC_TRY_LINK([#include <stdlib.h>],[atexit(exit);],[echo "atexit() found"],[
AC_TRY_LINK([#include <stdlib.h>],[on_exit(main);],[echo "using on_exit()"
def="$def -DUSE_ON_EXIT=1"],
def="$def -DNO_ATEXIT=1"
echo "You need either atexit() or on_exit() for STonX to work correctly!")])
if test $shwrap32 = 1; then
def="$def -DSHWRAP32"
fi
#### Optional modules/features
AC_ARG_ENABLE(monitor,
[  --enable-monitor	Enable mini ICE type monitor (slows emulation)],
enable_monitor=yes,
enable_monitor=no)

AC_ARG_ENABLE(svga,
[  --enable-svga        Enables SVGA support (linux only?)],
enable_svga=yes,
enable_svga=no)

AC_ARG_ENABLE(debug,
[  --enable-debug       Puts the breaks on the compile options so gdb works!],
enable_debug=yes,
enable_debug=no)

#### SYSTEM
echo "Running config.guess to determine your system type..."
t=`./config.guess`
echo 'You seem to have a `'$t"'"
endian=dunno
conf="config/generic.h"
case $t in
sparc-sun-sunos*)
	conf="config/sparc-sun-sunos.h"
if test "n$CC" = ngcc; then
	regs="-fomit-frame-pointer"
else
	regs=
	copt="-O4"
fi
	;;
sparc-sun-solaris*)
	echo "A Sun with Solaris 2.x"
	conf="config/sparc-sun-solaris.h"
if test "n$CC" = ngcc; then
	regs="-fomit-frame-pointer"
else
	regs=
	copt="-O"
fi
	;;
i*86-*-linux)
	echo 'Umm... OK, this should work.'
	echo 'NOTE: To enable Linux SVGAlib support, uncomment the 2 lines after the'
	echo 'one saying "#Linux SVGALIB support :" in the Makefile before compiling!'
	regs="-ffixed-ebx -ffixed-ebp -fomit-frame-pointer -m486 -malign-jumps=2 -malign-functions=4"
	copt="$copt -funroll-loops"
	conf="config/x86-linux.h"
	;;
i*86-*bsd*)
 	echo 'A 80x86-based BSD box...'
 	regs="-fomit-frame-pointer -ffixed-ebx -ffixed-ebp"
 	conf="config/x86-bsd.h"
 	;;
mips-sgi-irix*)
	echo 'Wow, an SGI!'
	conf="config/mips-sgi-irix.h"
	defs="$defs -D_BSD_SIGNALS"
	xtra="$xtra -laudio -lm"
if test "n$CC" = ngcc; then
	regs="-fomit-frame-pointer"
else
	regs=
	copt="-O2"
fi
	;;
mips-dec-ultrix*)
	echo "A DECstation..."
	conf="config/decstation.h"
if test "n$CC" = ngcc; then
	regs="-fomit-frame-pointer"
else
	regs=
	copt="-O2"
fi
	;;
hppa*-hp-hpux)
	echo "A HP with HP-UX and PA-RISC processor"
	conf="config/hpux.h"
if test "n$CC" = ngcc; then
	regs="-fomit-frame-pointer"
	static="-static"
else
	echo "You need gcc on HP-UX, sorry!"
	exit 1
fi
	;;
alpha-dec-osf*)
	echo "Wow, an Alpha/OSF!"
	xtra="$xtra -ldnet_stub -lots"
	conf="config/alpha.h"
if test "n$CC" = ngcc; then
	regs="-fomit-frame-pointer"
else
	regs=
	copt="-std1 -O4 -Olimit 9999"
fi
	;;
m68k-next-bsd)
	echo "A NeXTStation with NEXTSTEP and MC680x0 processor"
	conf="config/next68k.h"
if test "n$CC" = ngcc; then
	regs="-posix -fomit-frame-pointer"
else
	regs="-posix"
	copt="-O3"
fi
	;;
*)	echo "STonX has not been ported to this system ($t), please let me"
	echo "know if you can compile and run it successfully!"
	echo "Determining this system's endianness and short/int sizes..."
if test "n$CC" = ngcc; then
	regs="-fomit-frame-pointer"
else
	regs=
	copt="-O2"
fi
	$CC -o conftest config/endianness.c
	if endian=`./conftest`; then
		echo "Sizes are OK..."
	else
		echo "Sorry, sizeof(short),sizeof(int) must be 2,4!"
		exit 1
	fi
	rm -f ./conftest
case $endian in 
	big)	echo "You're using a big-endian processor, very good!";;
	little)	echo "You're using a little-endian processor, too bad...";;
	*)	
	echo "Your machine seems to have a weird byte-ordering format, which I can't deal"
	echo "with - sorry!."
	;;
esac
esac
case $endian in 
	big) def="$def -DIS_BIG_ENDIAN=1";;
	little)	def="$def -DIS_BIG_ENDIAN=0";;
esac

AC_C_INLINE
if test "n$ac_cv_c_inline" = "nno"; then
  inline=
else
  inline="$ac_cv_c_inline"
fi
AC_SUBST(inline)
echo "Looking for some functions..."
AC_CHECK_FUNC(strdup,,def="$def -DNO_STRDUP")
AC_CHECK_FUNC(bzero,,def="$def -DNO_BZERO")
AC_MSG_CHECKING(if statfs() and stat() work as I want them to)
statfs=no
AC_TRY_LINK([
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/statvfs.h>],
[struct statvfs s; struct stat st; statvfs("/",&s); stat("/",&st);
 return s.f_bavail+s.f_blocks+st.st_blksize;],
statfs=STATFS_USE_STATVFS)
if test $statfs = no; then
AC_TRY_LINK([
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <sys/vfs.h>],
[struct statfs s; struct stat st; statfs("/",&s); stat("/",&st);
 return s.f_bavail+s.f_blocks+st.st_blksize;],
statfs=STATFS_USE_VFS)
fi
if test $statfs = no; then
AC_TRY_LINK([
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/param.h>
#include <sys/mount.h>],
[struct statfs s; struct stat st; statfs("/",&s); stat("/",&st);
 return s.f_bavail+s.f_blocks+st.st_blksize;],
statfs=STATFS_USE_MOUNT)
fi
if test $statfs = no; then
AC_TRY_LINK([
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/statfs.h>
#include <sys/vmount.h>],
[struct statfs s; struct stat st; statfs("/",&s); stat("/",&st);
 return s.f_bavail+s.f_blocks+st.st_blksize;],
statfs=STATFS_USE_STATFS_VMOUNT)
fi
if test $statfs = no; then
echo
echo "Sorry, this doesn't seem to work. Please let me know what system you are"
echo "using, and I'll try to fix this problem. If you find a portable solution"
echo "for this, other than using external commands or ripping code from GNU"
echo "df, please tell me."
echo "Most likely, you can fix this problem by looking at the manpage of"
echo 'either statfs or statvfs or similar and fixing the include files and'
echo "the Dfree() code in gemdos.c"
statfs=FIX_ME_IN_GEMDOS.C
fi
AC_MSG_RESULT($statfs)
def="$def -D$statfs"

#
# Now we can create a config.h based on system + enabled features
#

echo "Creating config.h"

rm -f config.h
cat $conf > config.h

echo "Checking if you want monitor funtionality"

if test "$enable_monitor" = "yes"; then
	echo "#define MONITOR 1" >> config.h
	mon_objs="monitor.o di_dis.o"
	mon_files="monitor.c di_dis.c"
fi

 
#ln -s $conf config.h

echo "Checking if you want to debug this puppy"

# Now export the vars we will need to create the makefile

if test "$enable_debug" = "yes"; then
	echo "old copt was $copt"
	copt="-O0 -ggdb"
	echo "new copt now $copt"
fi	

echo "Creating Makefile from Makefile.in"

echo "REGS:$regs, DEF:$def, XTRA:$xtra"

AC_SUBST(regs)
AC_SUBST(def)
AC_SUBST(xtra)
AC_SUBST(copt)
AC_SUBST(static)
AC_SUBST(mon_objs)
AC_SUBST(mon_files)
AC_SUBST(MAKEDEPEND)
SCC="$CC"
AC_SUBST(SCC)
test -f Makefile.devel || touch Makefile.devel
AC_OUTPUT(Makefile,
echo "=== don't worry about strange warning messages here! ==="; make depend)
