dnl This is the the source file used to produce the configure script
AC_INIT(defs.h)
AC_CONFIG_HEADER(config.h)

version="0.6.7.6"
AC_SUBST(version)
echo "Configuring STonX version $version..."
echo "#define VERSION \"$version\"">version.h
echo "#define STONX_VERSION_MAJOR 0">>version.h
echo "#define STONX_VERSION_MINOR 6">>version.h
echo "#define STONX_PATCH_MAJOR 7">>version.h
echo "#define STONX_PATCH_MINOR 6">>version.h

#### PROGRAMS

AC_PROG_CC
AC_ISC_POSIX
static=

if test "n$GCC" != nyes; then
echo "Note: using gcc may improve the speed of emulation significantly!"
else
copt="-Wall -Wno-unused -O3"
fi

AC_MSG_CHECKING(whether shifts are modulo 32)
AC_TRY_RUN(
	[ unsigned int r=1;
	  main(){return (r<<33)==2;} ],
	[ shwrap32=0
	  AC_MSG_RESULT([no (good!)]) ],
	[ shwrap32=1
	  AC_MSG_RESULT([yes (yuck)]) ],
	[ AC_MSG_RESULT([can't check this when cross compiling]) ]
	)

AC_CHECK_PROGS(MAKEDEPEND,gccmakedep makedepend, no)
if test "n$MAKEDEPEND" = nno; then
cat <<'EOF'
You don't seem to have `makedepend', but I'll continue the configuration
process. It will fail at the end when I'll try to do a `make depend', you're
on your own then... (Yes, I know I could use gcc -MM etc. but I was too lazy)

You don't really need this if you're going to compile only once, or without
altering the code.
EOF
fi

#### LIBRARIES

AC_PATH_XTRA
if test "x$no_x" = yes; then
	echo "Sorry, I can't find any trace of the X Window installation (X11) on your"
	echo "system! Please use --x-includes=DIR and --x-libraries=DIR if you have them."
	exit 1
fi
test -n "$x_includes" && inc="$inc -I$x_includes"
test -n "$x_libraries" && xlibs="$xlibs -L$x_libraries"
AC_SUBST(inc)
AC_SUBST(xlibs)
AC_SUBST(X_CFLAGS)
AC_SUBST(X_LIBS)
AC_SUBST(X_EXTRA_LIBS)
AC_SUBST(X_PRE_LIBS)
AC_MSG_CHECKING(for MIT-SHM extension)
TMPLIBS=$LIBS
LIBS="$LIBS $X_PRE_LIBS $xlibs -lXext -lX11 $X_EXTRA_LIBS -lc"
AC_TRY_LINK([
#include <X11/Xlib.h>
#include <X11/extensions/XShm.h>],
[
int a,b; Bool c; Display *d;
XShmQueryVersion (d, &a, &b, &c);
],
def="$def -DSH_MEM"
shm=ok,
LIBS=$TMPLIBS
shm=no)
AC_MSG_RESULT($shm)

#### Functions

AC_MSG_CHECKING([for atexit])
AC_TRY_LINK(
 [#include <stdlib.h>],[atexit(exit);],[AC_MSG_RESULT([atexit() found])],
 [AC_TRY_LINK([#include <stdlib.h>],[on_exit(main);],
  [ AC_MSG_RESULT([using on_exit()])
   def="$def -DUSE_ON_EXIT=1"],
  def="$def -DNO_ATEXIT=1"
  AC_MSG_WARN([You need either atexit() or on_exit() for STonX to work correctly!]))]
 )

if test $shwrap32 = 1; then
 def="$def -DSHWRAP32"
fi

#### Optional modules/features

AC_ARG_ENABLE(monitor,
[  --enable-monitor        Enable mini ICE type monitor (slows emulation)],
enable_monitor=$enableval,
enable_monitor=no)

AC_ARG_ENABLE(svga,
[  --enable-svga           Enables SVGA support (linux only?)],
enable_svga=$enableval,
enable_svga=no)

AC_ARG_ENABLE(debug,
[  --enable-debug          Puts the breaks on the compile options so gdb works!],
enable_debug=$enableval,
enable_debug=no)

#### SYSTEM

AC_MSG_CHECKING([your system type with config.guess])
t=`./config.guess`
AC_MSG_RESULT([$t])
AC_C_BIGENDIAN

case $t in
sparc-sun-sunos*)
	AC_DEFINE(SRREG, "%g5")
	AC_DEFINE(PCREG, "%g6")
	AC_DEFINE(NZREG, "%g7")
	AC_DEFINE(STONX_AUDIO_SPARC)
	if test "n$CC" = ngcc; then
	  regs="-fomit-frame-pointer"
	else
	  regs=
	  copt="-O4"
	fi
	;;
sparc-sun-solaris*)
	echo "A Sun with Solaris 2.x"
	AC_DEFINE(SRREG, "%g5")
	AC_DEFINE(PCREG, "%g6")
	AC_DEFINE(NZREG, "%g7")
	AC_DEFINE(STONX_AUDIO_SPARC)
	AC_DEFINE(SOLARIS)
	AC_DEFINE(SMALL,1)
	if test "n$CC" = ngcc; then
	  regs="-fomit-frame-pointer"
	else
	  regs=
	  copt="-O"
	fi
	;;
*-linux*)
	AC_DEFINE(JOYSTICK,1)
	AC_DEFINE(STONX_JOYSTICK_LINUX)
	AC_DEFINE(STONX_AUDIO_LINUX)
	case $t in
	i*86-*)
	  echo 'NOTE: To enable SVGAlib support call configure with --enable-svga'
	  AC_DEFINE(NZREG, "%ebx")
	  AC_DEFINE(PCREG, "%ebp")
	  regs="-ffixed-ebx -ffixed-ebp -fomit-frame-pointer"
	  ;;
	powerpc*)
	  regs="-fomit-frame-pointer"
	  ;;
	*)
	  regs=""
	esac
	copt="$copt -funroll-loops"
	;;
*bsd*)
 	echo 'A BSD box...'
	case $t in
	i*86-*)
	  AC_DEFINE(NZREG, "%ebx")
	  AC_DEFINE(PCREG, "%ebp")
 	  regs="-fomit-frame-pointer -ffixed-ebx -ffixed-ebp"
	  ;;
	*)
	  regs=""
	esac
	# Most BSD systems support OSS audio, too:
	AC_DEFINE(STONX_AUDIO_LINUX)
	libs=-lossaudio
 	;;
mips-sgi-irix*)
	echo 'Wow, an SGI!'
	AC_DEFINE(SRREG, "s0")
	AC_DEFINE(PCREG, "s1")
	AC_DEFINE(NZREG, "s2")
	AC_DEFINE(STONX_AUDIO_SGI)
	defs="$defs -D_BSD_SIGNALS"
	xtra="$xtra -laudio -lm"
	if test "n$CC" = ngcc; then
	  regs="-fomit-frame-pointer"
	else
	  regs=
	 copt="-O2"
	fi
	;;
mips-dec-ultrix*)
	echo "A DECstation..."
	AC_DEFINE(SRREG, "s0")
	AC_DEFINE(PCREG, "s1")
	AC_DEFINE(NZREG, "s2")
	if test "n$CC" = ngcc; then
	  regs="-fomit-frame-pointer"
	else
	  regs=
	  copt="-O2"
	fi
	;;
hppa*-hp-hpux)
	echo "A HP with HP-UX and PA-RISC processor"
	AC_DEFINE(SRREG, "r6")
	AC_DEFINE(PCREG, "r7")
	AC_DEFINE(NZREG, "r8")
	AC_DEFINE(STONX_AUDIO_HP)
	defs="$defs -Dsigned"
	if test "n$CC" = ngcc; then
	  regs="-fomit-frame-pointer"
	  static="-static"
	else
	  AC_MSG_ERROR([You need gcc on HP-UX, sorry!])
	fi
	;;
alpha-dec-osf*)
	echo "Wow, an Alpha/OSF!"
	AC_DEFINE(SRREG, "$9")
	AC_DEFINE(PCREG, "$10")
	AC_DEFINE(NZREG, "$11")
	xtra="$xtra -ldnet_stub -lots"
	if test "n$CC" = ngcc; then
	  regs="-fomit-frame-pointer"
	else
	  regs=
	  copt="-std1 -O4 -Olimit 9999"
	fi
	;;
m68k-next-bsd)
	echo "A NeXTStation with NEXTSTEP and MC680x0 processor"
	AC_DEFINE(PCREG, "a6")
	AC_DEFINE(NZREG, "d7")
	if test "n$CC" = ngcc; then
	  regs="-posix -fomit-frame-pointer"
	else
	  regs="-posix"
	  copt="-O3"
	fi
	;;
*)
	echo "STonX has not been ported to this system ($t),"
	echo "please let us know if you can compile and run it successfully!"
	AC_MSG_CHECKING([this system's 'short' and 'int' sizes])
	AC_TRY_RUN(
	[ main()
	 { if(sizeof(short) != 2 || sizeof(int) != 4) return 1;
	   return 0; }],
	[AC_MSG_RESULT(ok)],
	[AC_MSG_ERROR([Sorry, sizeof(short) must be 2 and sizeof(int) must be 4!])],
	[AC_MSG_WARN([Can't run test program for sizeof(int) and sizeof(short)!])]
	)
esac

AC_C_INLINE
if test "n$ac_cv_c_inline" = "nno"; then
  inline=
else
  inline="$ac_cv_c_inline"
fi
AC_SUBST(inline)
echo "Looking for some functions..."
AC_CHECK_FUNC(strdup,,def="$def -DNO_STRDUP")
AC_CHECK_FUNC(bzero,,def="$def -DNO_BZERO")
AC_MSG_CHECKING(if statfs() and stat() work as I want them to)
statfs=no
AC_TRY_LINK([
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/statvfs.h>],
[struct statvfs s; struct stat st; statvfs("/",&s); stat("/",&st);
 return s.f_bavail+s.f_blocks+st.st_blksize;],
statfs=STATFS_USE_STATVFS)
if test $statfs = no; then
AC_TRY_LINK([
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <sys/vfs.h>],
[struct statfs s; struct stat st; statfs("/",&s); stat("/",&st);
 return s.f_bavail+s.f_blocks+st.st_blksize;],
statfs=STATFS_USE_VFS)
fi
if test $statfs = no; then
AC_TRY_LINK([
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/param.h>
#include <sys/mount.h>],
[struct statfs s; struct stat st; statfs("/",&s); stat("/",&st);
 return s.f_bavail+s.f_blocks+st.st_blksize;],
statfs=STATFS_USE_MOUNT)
fi
if test $statfs = no; then
AC_TRY_LINK([
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/statfs.h>
#include <sys/vmount.h>],
[struct statfs s; struct stat st; statfs("/",&s); stat("/",&st);
 return s.f_bavail+s.f_blocks+st.st_blksize;],
statfs=STATFS_USE_STATFS_VMOUNT)
fi
if test $statfs = no; then
echo
echo "Sorry, this doesn't seem to work. Please let me know what system you are"
echo "using, and I'll try to fix this problem. If you find a portable solution"
echo "for this, other than using external commands or ripping code from GNU"
echo "df, please tell me."
echo "Most likely, you can fix this problem by looking at the manpage of"
echo 'either statfs or statvfs or similar and fixing the include files and'
echo "the Dfree() code in gemdos.c"
statfs=FIX_ME_IN_GEMDOS.C
fi
AC_MSG_RESULT($statfs)
def="$def -D$statfs"

#
# Now we can enable the wanted features
#

echo "Checking if you want monitor funtionality : $enable_monitor"

if test "$enable_monitor" = "yes"; then
	AC_DEFINE(MONITOR)
	mon_objs="monitor.o di_dis.o"
	mon_files="monitor.c di_dis.c"
fi

echo "Checking if you want to debug this puppy : $enable_debug"

if test "$enable_debug" = "yes"; then
	echo "old copt was $copt"
	copt="-O0 -ggdb"
	echo "new copt now $copt"
fi	

echo "Checking if you want SVGA support : $enable_svga"

if test "$enable_svga" = "yes"; then
	svga_target="stonvga"
	svga_objs="svga.o svgalib_vdi.o"
else
	svga_target=""
	svga_objs=""
fi
	

echo "Creating Makefile from Makefile.in"

AC_SUBST(regs)
AC_SUBST(def)
AC_SUBST(xtra)
AC_SUBST(copt)
AC_SUBST(static)
AC_SUBST(mon_objs)
AC_SUBST(mon_files)
AC_SUBST(svga_target)
AC_SUBST(svga_objs)
AC_SUBST(libs)
AC_SUBST(MAKEDEPEND)
SCC="$CC"
AC_SUBST(SCC)
test -f Makefile.devel || touch Makefile.devel
AC_OUTPUT([Makefile stonx.spec],
 echo "=== don't worry about strange warning messages here! ==="; make depend)
