# STonX Top Level Makefile
#
# This Makefile has a bit of history but for now all you need to know
# is that the configure script creates the Makefile from Makefile.in
# subsituting things surrounded by @ symbols with stuff the configure
# script works out.
#
# This Makefile.in is very ugly and could be improved.
# We should probably make a complete automake, autoconf configuration.
#
# The Makefile still awaits a true makefile guru
# to sprinkle some pixie dust on it. - AJB
#

.SUFFIXES: 	.m4 .img .S .prof .i .cs .tab

# Paths and dirs (passed in by configure script or modified with -e option (for rpms))
prefix = @prefix@
exec_prefix = @exec_prefix@
sysconfdir = @sysconfdir@
STONXDIR=@datadir@/stonx

SHELL=/bin/sh
MAKEDEPEND=@MAKEDEPEND@
SUBDIRS = cartridge  # mint

# Register variables (-ffixed-reg)
REGS= @regs@

# Optimization and debugging options
OPT=@copt@

# Additional header file paths
INC=-I. @X_CFLAGS@

#Linux:
INC=-I. @X_CFLAGS@

# Non X Library files (not needed on linux, so far just -lossaudio on bsd's)
LIBS=@libs@

# X11 library path - I'm sure not everything here is X related?
XLIBS=@X_LIBS@ @X_PRE_LIBS@ -lXext -lX11 @X_EXTRA_LIBS@ @xtra@
SFLAGS=

#Monitor support, call configure with --enable-monitor, otherwise these will blank
MON_OBJS = @mon_objs@
MON_FILES = @mon_files@

#Linux SVGALIB support, call configure with --enable-svga, otherwise these will be blank
SVGALIBS=-lvgagl -lvga 
SVGAOBJ=@svga_objs@
SVGATARGET=@svga_target@

DEF= @def@ -DINLINE=@inline@ -DSTONXDIR=\"$(STONXDIR)\"

# Compiler
#CC=@CC@ @static@ $(REGS)
#CC=gcc -ansi -Wall -W -Wpointer-arith -Wstrict-prototypes -Wno-unused
CC=@CC@ 
SCC=@SCC@ $(REGS)

# Preprocessor
CPP=@CPP@

CFLAGS= $(INC) $(AINC) $(DEF) $(ADEF) $(OPT) $(SFLAGS)

MINTOBJS= mint/mint_comm.o mint/mint_stonxfs_fs.o mint/mint_stonxfs_dev.o\
	 mint/mint_interface.o mint/mint_serial.o mint/mint_misc.o \


OBJ=cpu.o $(MON_OBJS) io.o main.o native.o utils.o ikbd.o debug.o\
	blitter.o mem.o audio.o midi.o\
	gemdos.o ui.o screen.o fdc.o bios.o\
	syscalls.o memarray.o sfp.o toserror.o\
	cookie.o $(MINTOBJS)

XOBJ=x.o xlib_vdi.o

MOREOBJ= code0000.o code0300.o code0600.o code0900.o code1200.o code1500.o

CSRC=$(OBJ:.o=.c) $(SVGAOBJ:.o=.c) $(XOBJ:.o=.c) gen.c
DIST=$(CSRC) am.h mem.h debug.h defs.h main.h xlib_vdi.h tosdefs.h\
	ikbd.h screen.h Keysyms Makefile.in \
	docs/AUTHORS docs/DEBUGGING docs/INSTALL docs/PROGRAMS \
	docs/README docs/RELEASE_NOTES docs/TOS-VERSIONS ChangeLog \
	configure fill.xbm iotab1.c iotab2.c config/*.[hc] config.guess \
	tosfonts.c fonthdr.h fnttobdf.c data/makefonts.sh \
	blitter.c audio.c mem.c memarray.c bios.c \
	options.h gemdos.h COPYING configure.in\
	68000.def gen.c gendefs.m4 gendefs.h emulator.h\
	amdefs.h genhead.c ui.c m4_to_c.sh cpu.h stonx.Keysyms \
	atari/FLOPPY-4MB atari/bench1.pas atari/bench1.prg atari/final.tos \
	cartridge/cartridge.img cartridge/cartridge.s cartridge/cartridge.h \
        cartridge/Makefile cartridge/cartridge.txt \
	syscalls.h utils.h iofuncs.h blitter.h native.h audio.h io.h ui.h \
	fdc.c fdc.h cookie.h svgalib_vdi.h x.h \
	svga.h midi.c midi.h sfp.h toserror.h \
	mint/mint_comm.c mint/mint_stonxfs_fs.c mint/mint_stonxfs_dev.c\
	mint/mint_interface.c mint/mint_serial.c mint/mint_misc.c \
	mint/mint_defs.h mint/mint_comm.h mint/mint_serial.h \
	mint/mint_stonxfs_fs.h mint/mint_stonxfs_fs.h mint/mint_interface.h \
	mint/mint_misc.h mint/mint_stonxfs_dev.h \
	mint/atari/BINFILES mint/atari/SRCFILES mint/atari/EXTRAFILES \
	mint/atari/MISCFILES mint/atari/Makefile mint/atari/README \
	mint/atari/bypass.s mint/atari/callstonx.s mint/atari/com_dev.c \
	mint/atari/com_dev.h mint/atari/serial_dev.c mint/atari/serial_dev.h \
	mint/atari/stonx_dev.c mint/atari/stonx_dev.h mint/atari/main.c \
	mint/atari/stonxfsv.h mint/atari/stonx.xfs mint/atari/global.h \
	mint/atari/stonx_xfs.c mint/atari/stonx_xfs.h

DEPSRC=$(CSRC) $(MOREOBJ:.o=.c)

#ROMOFF=16515072
ROMOFF=1048576

DIR=STonX-@version@
INSTBIN=@bindir@

.c.o:
	$(SCC) $(CFLAGS) -c $< -o $@

.c.s:
	$(SCC) $(CFLAGS) -S $<

.m4.c:
	m4 < $< > $@

.c.cs:
	$(CC) $(CFLAGS) -fverbose-asm -S $< -o $@ 

.c.i:	
	$(CPP) $(CFLAGS) $< > $@

all:	rekursive configure Makefile stonx @svga_target@ cartridge/cartridge.img \
	fnttobdf tosfonts

rekursive: $(SUBDIRS)
	@for subdir in $(SUBDIRS) ; do \
	  (cd $$subdir; $(MAKE) -r all DEFS="$(DEF)"); \
	done

Makefile:	Makefile.in
	./configure

configure:	configure.in
	autoconf

fonts:	fonts-done.stmp

fonts-done.stmp:	tosfonts 
	@if test ! -f tos.img; then \
	echo "Please copy a TOS image to this directory as tos.img"; \
	exit 1; \
	fi; \
	echo "Making the System fonts..."; \
	test -d data || mkdir data; \
	./tosfonts <tos.img; \
	mv System?.fnt data; \
	(cd data; ./makefonts.sh) && touch fonts-done.stmp

gen:	gen.c amdefs.h options.h config.h
	$(CC) -O -o $@ $(DEF) gen.c

code.m4 code0000.m4 code0300.m4 code0600.m4 code0900.m4 code1200.m4 code1500.m4:	gen 68000.def genhead.c
	cat genhead.c  >code.m4
	./gen <68000.def >>code.m4

code.c code0000.c code0300.c code0600.c code0900.c code1200.c code1500.c:	code.m4 code0000.m4 code0300.m4 code0600.m4 code0900.m4 code1200.m4 code1500.m4 gendefs.m4
	./m4_to_c.sh

cpu.o:	code.c

stonx:	$(OBJ) $(XOBJ) $(MOREOBJ)
	$(SCC) @static@ -o $@ $(OBJ) $(XOBJ) $(MOREOBJ) $(LIBS) $(XLIBS)

stonvga: $(OBJ) $(SVGAOBJ) $(MOREOBJ)
	$(SCC) @static@ -o $@ $(OBJ) $(SVGAOBJ) $(MOREOBJ) $(SVGALIBS)

fnttobdf:	fnttobdf.c
	$(CC) -o $@ fnttobdf.c $(XLIBS) @X_PRE_LIBS@ -lXext -lX11 @X_EXTRA_LIBS@

tosfonts:	tosfonts.c
	$(CC) -o $@ tosfonts.c $(XLIBS) @X_PRE_LIBS@ -lXext -lX11 @X_EXTRA_LIBS@

clean:
	rm -f $(OBJ) $(MOREOBJ) $(XOBJ) $(SVGAOBJ) \
	rm -f mon.out gmon.out fonts-done.stmp
	rm -f tosfonts fnttobdf data/System?.fnt tosfonts.o fnttobdf.o\
              execute.o

realclean: clean
	rm -f gen code*.c code*.m4 gentabs.c

distclean: realclean
	rm -f Makefile config.cache config.status config.h config.log \
              Makefile.bak Makefile.devel\
              configure

# this gets screwed up by not doing a --enable-svga first as the RPM build
# assumes its doing both. This will get fixed later
dist:	$(DIST)
	rm -rf /tmp/$(DIR)
	mkdir /tmp/$(DIR)
	tar cf - $(DIST)|(cd /tmp/$(DIR); tar xpf -)
	(cd /tmp; tar cf - $(DIR)|gzip -9 > $(DIR).tar.gz)
	mv /tmp/$(DIR).tar.gz .

bindist:
	(cd /tmp/$(DIR); rm -rf *.o *.c *.h m4_to_c.sh *.m4 68000.def Makefile* config* cartridge/cartridge.s data fnttobdf fill.xbm fonts-done.stmp gen kludge tosfonts)

install:
	install -c -s stonx $(INSTBIN)/stonx
	mkdir -p $(STONXDIR)/gemdos_c
	install -c -m 0644 cartridge/cartridge.img $(STONXDIR)/cartridge.img
	@if test -f /etc/stonxrc; then \
	echo "/etc/stonxrc already exists, creating /etc/stonxrc.new" >&2; \
	echo "cartridge $(STONXDIR)/cartridge.img" > $(sysconfdir)/stonxrc.new ; \
	echo "tos $(STONXDIR)/tos.img" >> $(sysconfdir)/stonxrc.new ; \
	echo "fs C:$(STONXDIR)/gemdos_c" >> $(sysconfdir)/stonxrc.new ; \
	echo "vbl 2 refresh 2 chunky" >> $(sysconfdir)/stonxrc.new ; \
	echo "boot c" >> /etc/stonxrc.new ; \
	else \
	echo "cartridge $(STONXDIR)/cartridge.img" > $(sysconfdir)/stonxrc ; \
	echo "tos $(STONXDIR)/tos.img" >> $(sysconfdir)/stonxrc ; \
	echo "fs C:$(STONXDIR)/gemdos_c" >> $(sysconfdir)/stonxrc ; \
	echo "vbl 2 refresh 2 chunky" >> $(sysconfdir)/stonxrc ; \
	echo "boot c" >> $(sysconfdir)/stonxrc ; \
	fi ; \
	echo "To complete installation you should copy tos.img to:" ; \
        echo "    " $(STONXDIR) ; \
	echo "And you should copy your prefered Keysyms file to /etc/stonx.Keysyms ."

depend: $(DEPSRC) 
	cp Makefile Makefile.bak
	chmod +w Makefile
	$(MAKEDEPEND) $(INC) $(DEF) $(DEPSRC) 
	sed -n '/^# DO NOT DELETE/,$$p' < Makefile > Makefile.tmp
	sed -n '1,/^# DO NOT DELETE/p' < Makefile > Makefile.new
	tail +2 Makefile.tmp|\
	sed 's/^\([A-Za-z0-9_]*\)\.o:/\1.o \1.ln:/g'>>Makefile.new
	rm -f Makefile.tmp
	mv Makefile.new Makefile

# This assume you already have your RPM dirs set up 
#rpm: $(RPMDIR)/SOURCES/STonX-$(VERSION).tar.gz ./stonx.spec
#        rm -rf rpmtmp ||:
#        mkdir rpmtmp
#        mkdir rpmtmp/usr
#        mkdir rpmtmp/etc
#        mkdir rpmtmp/opt
#        mkdir rpmtmp/usr/local
#        rpm -ba --buildroot `pwd`/rpmtmp stonx.spec
#        cp $(RPMDIR)/SRPMS/STonX-$(VERSION)-1.src.rpm .
#        cp $(RPMDIR)/RPMS/*/STonX-$(VERSION)-1.*.rpm .
#        rm -rf rpmtmp#
#
#$(RPMDIR)/SOURCES/STonX-$(VERSION).tar.gz: STonX-$(VERSION).tar.gz
#        cp STonX-$(VERSION).tar.gz $(RPMDIR)/SOURCES/STonX-$(VERSION).tar.gz

# DO NOT DELETE
